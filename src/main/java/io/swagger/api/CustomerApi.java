/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.1-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Customer;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-12-08T11:08:14.094+03:00")

@Api(value = "customer", description = "the customer API")
public interface CustomerApi {

    @ApiOperation(value = "customerCreate", nickname = "customerCreate", notes = "", response = Customer.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Customer", response = Customer.class) })
    @RequestMapping(value = "/customer",
        produces = { "application/json" }, 
        //consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Customer> customerCreate(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Customer customer);


    @ApiOperation(value = "customerDelete", nickname = "customerDelete", notes = "", tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Success") })
    @RequestMapping(value = "/customer/{customerId}",
        produces = { "application/json" }, 
        //consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> customerDelete(@ApiParam(value = "",required=true) @PathVariable("customerId") String customerId);


    @ApiOperation(value = "customerFind", nickname = "customerFind", notes = "", response = Customer.class, responseContainer = "List", tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "List of Customer", response = Customer.class, responseContainer = "List") })
    @RequestMapping(value = "/customer",
        produces = { "application/json" }, 
        //consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Customer>> customerFind(@ApiParam(value = "") @Valid @RequestParam(value = "fields", required = false) String fields);


    @ApiOperation(value = "customerGet", nickname = "customerGet", notes = "", response = Customer.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Customer", response = Customer.class) })
    @RequestMapping(value = "/customer/{customerId}",
        produces = { "application/json" }, 
        //consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Customer> customerGet(@ApiParam(value = "",required=true) @PathVariable("customerId") String customerId,@ApiParam(value = "") @Valid @RequestParam(value = "fields", required = false) String fields);


    @ApiOperation(value = "customerPatch", nickname = "customerPatch", notes = "", response = Customer.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Success Customer", response = Customer.class) })
    @RequestMapping(value = "/customer/{customerId}",
        produces = { "application/json" }, 
        //consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Customer> customerPatch(@ApiParam(value = "",required=true) @PathVariable("customerId") String customerId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Customer customer);


    @ApiOperation(value = "customerUpdate", nickname = "customerUpdate", notes = "", response = Customer.class, tags={ "customer", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Success Customer", response = Customer.class) })
    @RequestMapping(value = "/customer/{customerId}",
        produces = { "application/json" }, 
        //consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Customer> customerUpdate(@ApiParam(value = "",required=true) @PathVariable("customerId") String customerId,@ApiParam(value = "" ,required=true )  @Valid @RequestBody Customer customer);

}
